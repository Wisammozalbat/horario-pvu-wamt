{"version":3,"sources":["components/inputs/InputsStyle.js","components/inputs/Inputs.js","components/schedules/Schedules.js","App.js","reportWebVitals.js","index.js"],"names":["InputsStyle","styled","div","Inputs","props","useState","groups","actualGroup","startTime","duration","values","setValues","columns","setColumns","valueChangeHandler","e","preventDefault","target","name","value","checkHour","hour","min","aux","Math","floor","onSubmit","interval","rows","round","startHour","split","console","log","startMinute","addHour","addMin","arr","activeGroup","i","actual","j","push","calculateData","htmlFor","type","id","onChange","className","map","column","index","row","rowIndex","Schedules","App","data","setData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAEaA,E,MAAcC,EAAOC,IAAV,0xB,OC2KTC,EA1KA,SAACC,GACd,MAA4BC,mBAAS,CACnCC,OAAQ,EACRC,YAAa,EACbC,UAAW,QACXC,SAAU,KAJZ,mBAAOC,EAAP,KAAeC,EAAf,KAOA,EAA4BN,mBAAS,CACnCC,QAAQ,EACRC,aAAa,EACbC,WAAW,EACXC,UAAU,IAJZ,mBAOA,GAPA,UAO8BJ,mBAAS,KAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAEMC,EAAqB,SAACC,GAC1BA,EAAEC,iBACFL,EAAU,2BAAKD,GAAN,kBAAeK,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,UAG7CC,EAAY,SAACC,EAAMC,GACvB,GAAIA,GAAO,GAAI,CACb,IAAIC,EAAMC,KAAKC,MAAMH,EAAM,IAC3BA,GAAO,GAAKC,EACZF,GAAQE,EAOV,OAJIF,GAAQ,KACVA,GAAQ,IAGH,CAAEA,OAAMC,QAyEjB,OACE,eAACtB,EAAD,WACE,uBAAM0B,SAPQ,SAACX,GACjBA,EAAEC,iBAlEkB,WAEpB,IAAMW,EAAWjB,EAAOD,SAAWC,EAAOJ,OAIpCsB,EAAOJ,KAAKK,MAAO,KAAWF,GAG9BG,GAAapB,EAAOF,UAAUuB,MAAM,KAAK,GAC/CC,QAAQC,IAAI,mBAAoBH,GAEhC,IAAMI,GAAexB,EAAOF,UAAUuB,MAAM,KAAK,GACjDC,QAAQC,IAAI,qBAAsBC,GAWlC,IATA,IAAMC,EAAUX,KAAKC,MAAME,EAAW,IAGhCS,EAASZ,KAAKK,MAAQF,EAAW,GAAM,EAAK,IAG9CU,EAAM,GACNC,GAAe5B,EAAOH,YAAc,EAE/BgC,EAAI,EAAGA,GAAK7B,EAAOJ,OAAQiC,IAAK,CACvC,IAAIC,EAAS,CAAEnB,KAAMS,EAAWR,IAAKY,GAGrCG,EAAIE,EAAID,GAAe,GAEnBC,EAAI,IACNC,EAAOlB,MAAQZ,EAAOD,SAAW8B,EACjCC,EAASpB,EAAUoB,EAAOnB,KAAMmB,EAAOlB,MAGzC,IAAK,IAAImB,EAAI,EAAGA,EAAIb,EAAMa,IACd,IAANA,IAQFD,EAAOnB,MAAQc,EACfK,EAAOlB,KAAOc,EAEdI,EAASpB,EAAUoB,EAAOnB,KAAMmB,EAAOlB,MATvCe,EAAIE,EAAID,GAAaI,KAArB,UACKF,EAAOnB,KAAO,GAAK,IAAMmB,EAAOnB,KAAOmB,EAAOnB,KADnD,YAEImB,EAAOlB,IAAM,GAAK,IAAMkB,EAAOlB,IAAMkB,EAAOlB,MAiBhDiB,EAAI,EAAID,IAAgB5B,EAAOJ,SACjCgC,IAAgB5B,EAAOJ,QAG3B0B,QAAQC,IAAII,GACZxB,EAAWwB,GAKXM,IAKE,UACE,uBAAOC,QAAQ,SAAf,gCACA,uBACEC,KAAK,SACL3B,KAAK,SACL4B,GAAG,SACH3B,MAAOT,EAAOJ,OACdyC,SAAU,SAAChC,GACTD,EAAmBC,MAGvB,uBAAO6B,QAAQ,cAAf,0BACA,uBACEC,KAAK,SACL3B,KAAK,cACL4B,GAAG,cACH3B,MAAOT,EAAOH,YACdwC,SAAU,SAAChC,GACTD,EAAmBC,MAGvB,uBAAO6B,QAAQ,YAAf,uEAGA,uBACEC,KAAK,OACL3B,KAAK,YACL4B,GAAG,YACH3B,MAAOT,EAAOF,UACduC,SAAU,SAAChC,GACTD,EAAmBC,MAGvB,uBAAO6B,QAAQ,WAAf,sCACA,uBACEC,KAAK,SACL3B,KAAK,WACL4B,GAAG,WACH3B,MAAOT,EAAOD,SACdsC,SAAU,SAAChC,GACTD,EAAmBC,MAGvB,wBAAQ8B,KAAK,SAAb,yBAGF,qBAAKG,UAAU,qBAAf,SACGpC,EAAQqC,KAAI,SAACC,EAAQC,GAAT,OACX,sBAAyBH,UAAU,kBAAnC,UACE,sBAAKA,UAAU,iBAAf,mBAAuCG,EAAQ,KAC9CD,EAAOD,KAAI,SAACG,EAAKC,GAAN,OACV,qBAAKL,UAAU,eAAf,SACGI,GADH,aAAyCD,EAAzC,eAAqDE,SAHzD,aAAgBF,aCzJXG,EAJG,SAAClD,GACjB,OAAO,8BCkBMmD,MAhBf,WACE,MAAwBlD,mBAAS,CAC/BC,OAAQ,EACRC,YAAa,EACbC,UAAW,QACXC,SAAU,KAJZ,mBAAO+C,EAAP,KAAaC,EAAb,KAOA,OACE,sBAAKT,UAAU,MAAf,UACE,cAAC,EAAD,CAAQS,QAASA,IACjB,cAAC,EAAD,CAAWD,KAAMA,QCJRE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c0d12303.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const InputsStyle = styled.div`\r\n  form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n\r\n    label {\r\n      margin-bottom: 1rem;\r\n      font-size: 1.6rem;\r\n    }\r\n\r\n    input {\r\n      border-radius: 0;\r\n      border: 1px solid black;\r\n      padding: 0.5rem 1rem;\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    button {\r\n      border-radius: 0.5rem;\r\n      padding: 1rem 2rem;\r\n      background-color: lightblue;\r\n      font-size: 1.6rem;\r\n      margin-top: 1rem;\r\n    }\r\n  }\r\n\r\n  .schedule {\r\n    &-container {\r\n      display: flex;\r\n      gap: 4rem;\r\n      justify-content: center;\r\n      margin-top: 2rem;\r\n      font-size: 2rem;\r\n    }\r\n\r\n    &-column {\r\n      display: flex;\r\n      flex-direction: column;\r\n    }\r\n\r\n    &-group {\r\n      font-weight: bold;\r\n    }\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\r\nimport { InputsStyle } from './InputsStyle';\r\n\r\nconst Inputs = (props) => {\r\n  const [values, setValues] = useState({\r\n    groups: 4,\r\n    actualGroup: 1,\r\n    startTime: '00:48',\r\n    duration: 30,\r\n  });\r\n\r\n  const [errors, setErrors] = useState({\r\n    groups: false,\r\n    actualGroup: false,\r\n    startTime: false,\r\n    duration: false,\r\n  });\r\n\r\n  const [columns, setColumns] = useState([]);\r\n\r\n  const valueChangeHandler = (e) => {\r\n    e.preventDefault();\r\n    setValues({ ...values, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const checkHour = (hour, min) => {\r\n    if (min >= 60) {\r\n      let aux = Math.floor(min / 60);\r\n      min -= 60 * aux;\r\n      hour += aux;\r\n    }\r\n\r\n    if (hour >= 24) {\r\n      hour -= 24;\r\n    }\r\n\r\n    return { hour, min };\r\n  };\r\n\r\n  const calculateData = () => {\r\n    //duracion en minutos de cada ciclo\r\n    const interval = values.duration * values.groups;\r\n    // console.log('intervalo: ', interval);\r\n\r\n    //cantidad de turnos en un dia para el mismo grupo\r\n    const rows = Math.round((24 * 60) / interval);\r\n    // console.log('turnos: ', rows);\r\n    //hora de inicio del grupo actual\r\n    const startHour = +values.startTime.split(':')[0];\r\n    console.log('hora de inicio: ', startHour);\r\n    //minuto de inicio del grupo actual\r\n    const startMinute = +values.startTime.split(':')[1];\r\n    console.log('minuto de inicio: ', startMinute);\r\n\r\n    const addHour = Math.floor(interval / 60);\r\n    // console.log('horas entre cada turno:', addHour);\r\n\r\n    const addMin = Math.round(((interval / 60) % 1) * 60);\r\n    // console.log('minutos entre cada turno:', addMin);\r\n\r\n    let arr = [];\r\n    let activeGroup = +values.actualGroup - 1;\r\n\r\n    for (let i = 0; i < +values.groups; i++) {\r\n      let actual = { hour: startHour, min: startMinute };\r\n      // console.log(activeGroup + i);\r\n\r\n      arr[i + activeGroup] = [];\r\n\r\n      if (i > 0) {\r\n        actual.min += +values.duration * i;\r\n        actual = checkHour(actual.hour, actual.min);\r\n      }\r\n\r\n      for (let j = 0; j < rows; j++) {\r\n        if (j === 0) {\r\n          // arr[3].push\r\n          arr[i + activeGroup].push(\r\n            `${actual.hour < 10 ? '0' + actual.hour : actual.hour}:${\r\n              actual.min < 10 ? '0' + actual.min : actual.min\r\n            }`\r\n          );\r\n        } else {\r\n          actual.hour += addHour;\r\n          actual.min += addMin;\r\n\r\n          actual = checkHour(actual.hour, actual.min);\r\n          // arr[3].push\r\n          arr[i + activeGroup].push(\r\n            `${actual.hour < 10 ? '0' + actual.hour : actual.hour}:${\r\n              actual.min < 10 ? '0' + actual.min : actual.min\r\n            }`\r\n          );\r\n        }\r\n      }\r\n\r\n      if (i + 1 + activeGroup >= +values.groups) {\r\n        activeGroup -= +values.groups;\r\n      }\r\n    }\r\n    console.log(arr);\r\n    setColumns(arr);\r\n  };\r\n\r\n  const calcuData = (e) => {\r\n    e.preventDefault();\r\n    calculateData();\r\n  };\r\n\r\n  return (\r\n    <InputsStyle>\r\n      <form onSubmit={calcuData}>\r\n        <label htmlFor=\"groups\">Cantidad de grupos</label>\r\n        <input\r\n          type=\"number\"\r\n          name=\"groups\"\r\n          id=\"groups\"\r\n          value={values.groups}\r\n          onChange={(e) => {\r\n            valueChangeHandler(e);\r\n          }}\r\n        />\r\n        <label htmlFor=\"actualGroup\">Grupo actual</label>\r\n        <input\r\n          type=\"number\"\r\n          name=\"actualGroup\"\r\n          id=\"actualGroup\"\r\n          value={values.actualGroup}\r\n          onChange={(e) => {\r\n            valueChangeHandler(e);\r\n          }}\r\n        />\r\n        <label htmlFor=\"startTime\">\r\n          Hora de inicio del grupo actual (formato 24 horas, HH:MM)\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"startTime\"\r\n          id=\"startTime\"\r\n          value={values.startTime}\r\n          onChange={(e) => {\r\n            valueChangeHandler(e);\r\n          }}\r\n        />\r\n        <label htmlFor=\"duration\">duraci√≥n (En minutos)</label>\r\n        <input\r\n          type=\"number\"\r\n          name=\"duration\"\r\n          id=\"duration\"\r\n          value={values.duration}\r\n          onChange={(e) => {\r\n            valueChangeHandler(e);\r\n          }}\r\n        />\r\n        <button type=\"submit\">Calcular</button>\r\n      </form>\r\n\r\n      <div className=\"schedule-container\">\r\n        {columns.map((column, index) => (\r\n          <div key={`col${index}`} className=\"schedule-column\">\r\n            <div className=\"schedule-group\">Grupo {index + 1}</div>\r\n            {column.map((row, rowIndex) => (\r\n              <div className=\"schedule-row\" key={`col${index}-row${rowIndex}`}>\r\n                {row}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </InputsStyle>\r\n  );\r\n};\r\n\r\nexport default Inputs;\r\n","import React from 'react';\r\n\r\nconst Schedules = (props) => {\r\n  return <></>;\r\n};\r\n\r\nexport default Schedules;\r\n","import { useState } from 'react';\nimport './App.css';\nimport Inputs from './components/inputs/Inputs';\nimport Schedules from './components/schedules/Schedules';\n\nfunction App() {\n  const [data, setData] = useState({\n    groups: 0,\n    actualGroup: 1,\n    startTime: '00:00',\n    duration: 20,\n  });\n\n  return (\n    <div className=\"App\">\n      <Inputs setData={setData} />\n      <Schedules data={data} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}